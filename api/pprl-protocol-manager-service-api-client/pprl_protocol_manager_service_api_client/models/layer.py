# coding: utf-8

"""
    PPRL Protocol Manager Service API

    Protocol manager service for privacy-preserving record linkage

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Layer(BaseModel):
    """
    Layer
    """ # noqa: E501
    name: Optional[StrictStr] = None
    matcher_method: Optional[StrictStr] = Field(default=None, alias="matcherMethod")
    batch_size_config: Optional[List[StrictInt]] = Field(default=None, alias="batchSizeConfig")
    max_batches: Optional[StrictInt] = Field(default=None, alias="maxBatches")
    encoding_method: Optional[StrictStr] = Field(default=None, alias="encodingMethod")
    update_matcher: Optional[StrictBool] = Field(default=None, alias="updateMatcher")
    update_type: Optional[StrictStr] = Field(default=None, alias="updateType")
    initial_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="initialThreshold")
    budget: Optional[StrictInt] = None
    error_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="errorRate")
    project_id: Optional[StrictStr] = Field(default=None, alias="projectId")
    batch_size: Optional[StrictInt] = Field(default=None, alias="batchSize")
    current_batch: Optional[StrictInt] = Field(default=None, alias="currentBatch")
    number_of_reviews: Optional[StrictInt] = Field(default=None, alias="numberOfReviews")
    active: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["name", "matcherMethod", "batchSizeConfig", "maxBatches", "encodingMethod", "updateMatcher", "updateType", "initialThreshold", "budget", "errorRate", "projectId", "batchSize", "currentBatch", "numberOfReviews", "active"]

    @field_validator('update_type')
    def update_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NEW_IMPROVED', 'UPPER_IMPROVED', 'IMPROVED', 'CR_ONLY']):
            raise ValueError("must be one of enum values ('NEW_IMPROVED', 'UPPER_IMPROVED', 'IMPROVED', 'CR_ONLY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Layer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Layer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "matcherMethod": obj.get("matcherMethod"),
            "batchSizeConfig": obj.get("batchSizeConfig"),
            "maxBatches": obj.get("maxBatches"),
            "encodingMethod": obj.get("encodingMethod"),
            "updateMatcher": obj.get("updateMatcher"),
            "updateType": obj.get("updateType"),
            "initialThreshold": obj.get("initialThreshold"),
            "budget": obj.get("budget"),
            "errorRate": obj.get("errorRate"),
            "projectId": obj.get("projectId"),
            "batchSize": obj.get("batchSize"),
            "currentBatch": obj.get("currentBatch"),
            "numberOfReviews": obj.get("numberOfReviews"),
            "active": obj.get("active")
        })
        return _obj


